---
import { getCollection } from 'astro:content';
import { getLangFromUrl, useTranslations } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get the correct update entry based on the language
const updatesEntry = await getCollection('updates', ({ id }) => {
  const desiredLang = lang.split('-')[0]; // 'es' or 'en'
  return id === `updates.${desiredLang}.md`;
});

// Assuming there's only one entry per language, take the first one
const currentUpdate = updatesEntry[0];

// Fallback if no entry is found for the current language
const fallbackUpdate = await getCollection('updates', ({ id }) => id === 'updates.es.md');
const displayUpdate = currentUpdate || fallbackUpdate[0];

// Extract data and renderable content
const { data, render } = displayUpdate;
const { Content } = await render();

// Define a simple client-side translation for the main title, if needed
// Or, if the main title comes from the Markdown frontmatter, use that directly.
const clientTranslations = {
    es: {
        mainTitle: 'Novedades',
    },
    en: {
        mainTitle: 'Updates',
    }
};

const currentClientLang = lang.split('-')[0];
const mainTitle = clientTranslations[currentClientLang]?.mainTitle || clientTranslations.es.mainTitle;

---

<section class="updates-section">
	<div class="container">
		<h2 class="updates-title" id="updates-title">{mainTitle}</h2>
		<div id="updates-content" class="updates-content">
            <!-- Render the Markdown content here -->
            <Content />
		</div>
	</div>
</section>

<script is:inline>
	document.addEventListener('DOMContentLoaded', function() {
		// This script will now only handle the main section title,
		// as the content comes from Markdown rendered by Astro.
		const clientTranslations = {
			es: {
				mainTitle: 'Novedades',
			},
			en: {
				mainTitle: 'Updates',
			}
		};

		function getCurrentLangClient() {
			return localStorage.getItem('selectedLanguage') || (navigator.language.startsWith('es') ? 'es' : 'en');
		}

		function updateMainTitle(lang) {
			const titleElement = document.getElementById('updates-title');
			if (titleElement) {
				const currentClientContent = clientTranslations[lang] || clientTranslations.es;
				titleElement.textContent = currentClientContent.mainTitle;
			}
		}

		// Initial render based on client-side language
		let clientLang = getCurrentLangClient();
		updateMainTitle(clientLang);

		// Listen for language changes from buttons
		document.querySelectorAll('.lang-btn').forEach(btn => {
			btn.addEventListener('click', function() {
				const lang = this.getAttribute('data-lang');
				localStorage.setItem('selectedLanguage', lang); // Ensure localStorage is updated
				updateMainTitle(lang);
			});
		});

		// Consider removing the MutationObserver if not strictly necessary,
		// as the .lang-btn listener should cover most cases for client-side language changes.
		// If other parts of your app change the language without a click,
		// you might need a more robust global event system (e.g., CustomEvent).
		const observer = new MutationObserver((mutations) => {
			let langChanged = false;
			mutations.forEach(mutation => {
				if (mutation.type === 'attributes' && mutation.attributeName === 'data-lang') {
					langChanged = true;
				}
			});
			if (langChanged) {
				const newLang = getCurrentLangClient();
				if (newLang !== clientLang) {
					clientLang = newLang;
					updateMainTitle(clientLang);
				}
			}
		});

		observer.observe(document.body, { subtree: true, attributes: true });
	});
</script>

<style>
	.updates-section {
		background: #f5f7fa;
		padding: 3rem 0 2rem 0;
		margin-top: 2rem;
		border-top: 2px solid #e0e0e0;
	}
	.updates-title {
		text-align: center;
		color: #2c3e50;
		font-size: 2rem;
		margin-bottom: 1.5rem;
		font-weight: 700;
	}
	.updates-content {
		max-width: 800px;
		margin: 0 auto;
		font-size: 1.1rem;
		line-height: 1.7;
		color: #34495e;
		background: #fff;
		border-radius: 12px;
		box-shadow: 0 2px 10px rgba(44,62,80,0.06);
		padding: 2rem 1.5rem;
		min-height: 80px;
	}

	/* Estilos para el markdown renderizado */
	.updates-content h1 {
		color: #2c3e50;
		font-size: 1.8rem;
		margin-bottom: 1rem;
		font-weight: 700;
	}

	.updates-content h2 {
		color: #34495e;
		font-size: 1.4rem;
		margin: 1.5rem 0 0.8rem 0;
		font-weight: 600;
	}

	.updates-content h3 {
		color: #2c3e50;
		font-size: 1.4rem;
		margin-bottom: 1rem;
		font-weight: 600;
	}

	.updates-content ul {
		margin: 0.8rem 0;
		padding-left: 1.5rem;
	}

	.updates-content li {
		margin: 0.3rem 0;
	}

	.updates-content p {
		margin: 0.8rem 0;
	}

	.updates-content strong {
		color: #34495e;
		font-weight: 600;
	}

	.updates-content em {
		font-style: italic;
		color: #7f8c8d;
	}

	.updates-content hr {
		border: none;
		border-top: 1px solid #e0e0e0;
		margin: 1.5rem 0;
	}

	/* Mejoras para tablets */
	@media (max-width: 1024px) {
		.updates-content {
			max-width: 90%;
			padding: 1.8rem 1.3rem;
		}
	}

	/* Mejoras para móviles */
	@media (max-width: 768px) {
		.updates-section {
			padding: 2rem 0 1.5rem 0;
		}
		
		.updates-title {
			font-size: 1.8rem;
			margin-bottom: 1.2rem;
		}
		
		.updates-content {
			max-width: 95%;
			padding: 1.5rem 1rem;
			font-size: 1rem;
			line-height: 1.6;
		}

		.updates-content h1 {
			font-size: 1.6rem;
		}

		.updates-content h2 {
			font-size: 1.3rem;
			margin: 1.3rem 0 0.7rem 0;
		}

		.updates-content h3 {
			font-size: 1.3rem;
		}

		.updates-content ul {
			padding-left: 1.2rem;
		}
	}

	/* Mejoras para móviles pequeños */
	@media (max-width: 480px) {
		.updates-section {
			padding: 1.5rem 0 1rem 0;
		}
		
		.updates-title {
			font-size: 1.6rem;
			margin-bottom: 1rem;
		}
		
		.updates-content {
			max-width: 98%;
			padding: 1.2rem 0.8rem;
			font-size: 0.95rem;
			line-height: 1.5;
		}

		.updates-content h1 {
			font-size: 1.4rem;
		}

		.updates-content h2 {
			font-size: 1.2rem;
			margin: 1.2rem 0 0.6rem 0;
		}

		.updates-content h3 {
			font-size: 1.2rem;
		}

		.updates-content ul {
			padding-left: 1rem;
		}
	}
</style>
